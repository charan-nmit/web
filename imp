//p3


package wc2package;

import java.io.IOException;
import java.util.Iterator;
import java.util.StringTokenizer;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;
import org.apache.hadoop.mapred.TextInputFormat;
import org.apache.hadoop.mapred.TextOutputFormat;

public class wc {

	public static class Map extends MapReduceBase implements
	 Mapper<LongWritable, Text, Text, IntWritable>
	{
		private final static IntWritable one=new IntWritable(1);
		private Text word= new Text();

		@Override
		public void map(LongWritable key, Text value, OutputCollector<Text, IntWritable> out, Reporter arg3)
				throws IOException 
		{
			// TODO Auto-generated method stub
			String myvalue=value.toString();
			StringTokenizer token=new StringTokenizer(myvalue);
			while(token.hasMoreTokens()) {
				word.set(token.nextToken());
				out.collect(word, one);
			}
			
		}
		
		
	}
	
	public static class Reduce extends MapReduceBase implements Reducer<Text, IntWritable, Text, IntWritable>
	{

		@Override
		public void reduce(Text key, Iterator<IntWritable> value, OutputCollector<Text, IntWritable> out,
				Reporter arg3) throws IOException 
		{
			// TODO Auto-generated method stub
			int sum=0;
			while(value.hasNext()) {
				sum+=value.next().get();
			}
			out.collect(key, new IntWritable(sum));
		}
		
	}
	
	
	
	
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		JobConf conf =new JobConf(wc.class);
		conf.setJobName("WC");
		
		conf.setOutputKeyClass(Text.class);
		conf.setOutputValueClass(IntWritable.class);
		
		conf.setMapperClass(Map.class);
		conf.setCombinerClass(Reduce.class);
		conf.setReducerClass(Reduce.class);
		
		conf.setInputFormat(TextInputFormat.class);
		conf.setOutputFormat(TextOutputFormat.class);
		
		FileInputFormat.setInputPaths(conf, new Path(args[0]));
		FileOutputFormat.setOutputPath(conf, new Path(args[1]));
		
		JobClient.runJob(conf);
		
				
		
		
		
	}

}






//p4a






package wc3;

import java.io.IOException;
import java.util.Iterator;
import java.util.StringTokenizer;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;
import org.apache.hadoop.mapred.TextInputFormat;
import org.apache.hadoop.mapred.TextOutputFormat;

public class WC
{

	public static class Map extends MapReduceBase implements
	 Mapper<LongWritable, Text, Text, IntWritable>
	{
		private final static IntWritable one=new IntWritable(1);
	

		@Override
		public void map(LongWritable key, Text value, OutputCollector<Text, IntWritable> out, Reporter arg3)
				throws IOException 
		{
			// TODO Auto-generated method stub
			//String myvalue=value.toString();
			String line=value.toString();
			String[] data=line.split(",");
			out.collect(new Text(data[2]), one);
//			StringTokenizer token=new StringTokenizer(myvalue);
//			while(token.hasMoreTokens()) {
//				word.set(token.nextToken());
//				out.collect(word, one);
//			}
			
		}
		
		
	}
	
	public static class Reduce extends MapReduceBase implements Reducer<Text, IntWritable, Text, IntWritable>
	{

		@Override
		public void reduce(Text key, Iterator<IntWritable> value, OutputCollector<Text, IntWritable> out,
				Reporter arg3) throws IOException 
		{
			// TODO Auto-generated method stub
			int sum=0;
			while(value.hasNext()) {
				sum+=value.next().get();
			}
			out.collect(key, new IntWritable(sum));
		}
		
	}
	
	
	
	
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		JobConf conf =new JobConf(WC.class);
		conf.setJobName("WC");
		
		conf.setOutputKeyClass(Text.class);
		conf.setOutputValueClass(IntWritable.class);
		
		conf.setMapperClass(Map.class);
		conf.setCombinerClass(Reduce.class);
		conf.setReducerClass(Reduce.class);
		
		conf.setInputFormat(TextInputFormat.class);
		conf.setOutputFormat(TextOutputFormat.class);
		
		FileInputFormat.setInputPaths(conf, new Path(args[0]));
		FileOutputFormat.setOutputPath(conf, new Path(args[1]));
		
		JobClient.runJob(conf);
		
				
		
		
		
	}

}









//p4b






package wc3;

import java.io.IOException;
import java.util.Iterator;
import java.util.StringTokenizer;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;
import org.apache.hadoop.mapred.TextInputFormat;
import org.apache.hadoop.mapred.TextOutputFormat;

public class WC
{

	public static class Map extends MapReduceBase implements
	 Mapper<LongWritable, Text, Text, IntWritable>
	{
		private final static IntWritable one=new IntWritable(1);
	

		@Override
		public void map(LongWritable key, Text value, OutputCollector<Text, IntWritable> out, Reporter arg3)
				throws IOException 
		{
			// TODO Auto-generated method stub
			//String myvalue=value.toString();
			String line=value.toString();
			String[] data=line.split(",");
//			out.collect(new Text(data[2]), one);
			out.collect(new Text(data[2]), new IntWritable(Integer.parseInt(data[3])));
//			StringTokenizer token=new StringTokenizer(myvalue);
//			while(token.hasMoreTokens()) {
//				word.set(token.nextToken());
//				out.collect(word, one);
//			}
			
		}
		
		
	}
	
	public static class Reduce extends MapReduceBase implements Reducer<Text, IntWritable, Text, IntWritable>
	{

		@Override
		public void reduce(Text key, Iterator<IntWritable> value, OutputCollector<Text, IntWritable> out,
				Reporter arg3) throws IOException 
		{
			// TODO Auto-generated method stub
			int sum=0;
			while(value.hasNext()) {
				sum+=value.next().get();
			}
			out.collect(key, new IntWritable(sum));
		}
		
	}
	
	
	
	
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		JobConf conf =new JobConf(WC.class);
		conf.setJobName("WC");
		
		conf.setOutputKeyClass(Text.class);
		conf.setOutputValueClass(IntWritable.class);
		
		conf.setMapperClass(Map.class);
		conf.setCombinerClass(Reduce.class);
		conf.setReducerClass(Reduce.class);
		
		conf.setInputFormat(TextInputFormat.class);
		conf.setOutputFormat(TextOutputFormat.class);
		
		FileInputFormat.setInputPaths(conf, new Path(args[0]));
		FileOutputFormat.setOutputPath(conf, new Path(args[1]));
		
		JobClient.runJob(conf);
		
				
		
		
		
	}

}







//hive







Create a database called "salesdb":
sql
Copy code
CREATE DATABASE salesdb;
Create a table named "sales" under the "salesdb" database with appropriate column names and data types, matching the columns in the Sales.csv file:
sql
Copy code
USE salesdb;
CREATE TABLE sales (
  transaction_id INT,
  product_id INT,
  name STRING,
  country STRING,
  state STRING,
  card_type STRING,
  price DOUBLE
) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE;
Import the data from the Sales.csv file into the "sales" table:
sql
Copy code
LOAD DATA INPATH 'path/to/Sales.csv' INTO TABLE sales;
Note: Replace 'path/to/Sales.csv' with the actual path to the Sales.csv file on your Hadoop Distributed File System (HDFS).

Count the number of sales done by each country:
sql
Copy code
SELECT country, COUNT(*) AS sales_count
FROM sales
GROUP BY country;
Count the number of sales done by each state:
sql
Copy code
SELECT state, COUNT(*) AS sales_count
FROM sales
GROUP BY state;
Display (Product, name) grouped by product:
sql
Copy code
SELECT product_id, name
FROM sales
GROUP BY product_id, name;
Create a separate view for VISA transactions:
sql
Copy code
CREATE VIEW visa_transactions AS
SELECT *
FROM sales
WHERE card_type = 'VISA';
Create a separate view for Mastercard transactions:
sql
Copy code
CREATE VIEW mastercard_transactions AS
SELECT *
FROM sales
WHERE card_type = 'Mastercard';
Show all the transactions done in Seattle:
sql
Copy code
SELECT *
FROM sales
WHERE state = 'Seattle';
Find the max number of transactions done within the state of Ontario:
sql
Copy code
SELECT MAX(sales_count) AS max_transactions
FROM (
  SELECT state, COUNT(*) AS sales_count
  FROM sales
  WHERE state = 'Ontario'
  GROUP BY state
) t;
Find the number of transactions whose price is between 1500-3600:
sql
Copy code
SELECT COUNT(*) AS transactions_count
FROM sales
WHERE price >= 1500 AND price <= 3600;
List all the transactions done in the United States using Mastercard:
sql
Copy code
SELECT *
FROM sales
WHERE country = 'United States' AND card_type = 'Mastercard';

