/*

//1 program

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
char res[500];
void sender()
{
int i,j,n,len;
char frm[100],l[100];
printf("Enter the number of frames");
scanf("%d",&n);
for(i=0;i<n;i++)
{
printf("Enter the frame %d",i+1);
scanf("%s",frm);
len=strlen(frm);
sprintf(l,"%d",len);
strcat(l,frm);
strcat(res,l);
}
printf("The final message is %s\n",res);
}
void receiver()
{
int i,j,len;
printf("Frame received\n");
for(i=0;i<strlen(res);i++)
{
len=res[i]-'0';
for(j=i+1;j<=(i+len);j++)
printf("%c",res[j]);
i=i+len;
printf("\n");
}
}
void main()
{
sender();
receiver();
}




//bitstuff



#include<stdio.h>
#include<string.h>
#include<stdlib.h>
void sender();
void receiver(int *message,int l2);
int main(void)
{
	sender();
}
void sender()
{
	int i,j,n,count=0,zerocounter=0,zero=0;
	int msg[50];
	int result[50];
	printf("Enter the number of bits of the message\n");
	scanf("%d",&n);
	printf("Enter the bits\n");
	for(i=0;i<n;i++)
	{
		scanf("%d",&msg[i]);
	}
	result[0]=0;
	result[1]=1;
	result[2]=1;
	result[3]=1;
	result[4]=1;
	result[5]=1;
	result[6]=1;
	result[7]=0;
	j=8;
	for(i=0;i<n;i++)
	{
		if(msg[i]==0)
		{
			result[j]=msg[i];
			j++;
			zero=1;
			count=0;
		}
		else 
		{
			if((count==5)&&(zero==1))
			{
				result[j]=0;
				zerocounter++;
				j++;
				result[j]=msg[i];
				j++;
				count=0;
			}
			else
			{
				result[j]=msg[i];
				j++;
				count++;
			}
		}	
	}
	result[j++]=0;
	result[j++]=1;
	result[j++]=1;
	result[j++]=1;
	result[j++]=1;
	result[j++]=1;
	result[j++]=1;
	result[j++]=0;
	int l1=16+n+zerocounter;
	printf("The length is: %d\n",l1);
	printf("The frame is\n");
	for(i=0;i<j;i++)
	{
		printf("%d",result[i]);
	}	
	receiver(result,l1);
}
void receiver(int *result,int l2)
{
	int i,j,counter,l3;
	int mesg[100];
	l3=l2-8;
	j=0;
	for(i=8;i<l3;i++)
	{
		if(result[i]==0)
		{
			if(counter==5)
			{
				i++;
				mesg[j]=result[i];
				j++;
				counter=0;
			}
			else
			{
				mesg[j]=result[i];
				j++;
				counter=0;
			}
		}
		else
		{
			mesg[j]=result[i];
			j++;
			counter++;
		}
	}
	printf("\nReciever side message is:");	
	for(i=0;i<j;i++)
	{
		printf("%d",mesg[i]);
	}
}
	
		


//crc




#include<stdio.h>
#include<string.h>
// length of the generator polynomial
#define N strlen(gen_poly)
// data to be transmitted and received
char data[28];
// CRC value
char check_value[28];
// generator polynomial
char gen_poly[10];
// variables 
int data_length,i,j;
// function that performs XOR operation
void XOR(){
    // if both bits are the same, the output is 0
    // if the bits are different the output is 1
    for(j = 1;j < N; j++)
    check_value[j] = (( check_value[j] == gen_poly[j])?'0':'1');
    printf("CHECK VALUEiii: %s\n",check_value);
}
void crc()
{
    // initializing check_value
    for(i=0;i<N;i++)
        check_value[i]=data[i];
    
    printf("DATA: %s\n",data);
    printf("CHECK VALUE: %s\n",check_value);
    do{
    // check if the first bit is 1 and calls XOR function
        if(check_value[0]=='1')
            XOR();
// Move the bits by 1 position for the next computation
        for(j=0;j<N-1;j++)
            check_value[j]=check_value[j+1];
            printf("CHECK VALUEfff: %s\n",check_value);
        // appending a bit from data
        check_value[j]=data[i++];
         printf("CHECK VALUEddd: %s\n",check_value);
        
    }while(i<=data_length+N-1);
// loop until the data ends
}
// Function to check for errors on the receiver side
void receiver(){
// get the received data
    printf("Enter the received data: ");
    scanf("%s", data);
    printf("\n-----------------------------\n");
    printf("Data received: %s", data);
// Cyclic Redundancy Check
    crc();
// Check if the remainder is zero to find the error
    for(i=0;(i<N-1) && (check_value[i]!='1');i++);
        if(i<N-1)
            printf("\nError detected\n\n");
        else
            printf("\nNo error detected\n\n");
}

int main()
{
    // get the data to be transmitted
    printf("\nEnter data to be transmitted: ");
    scanf("%s",data);
    printf("\n Enter the Generating polynomial: ");
    // get the generator polynomial
    scanf("%s",gen_poly);
    // find the length of data
    data_length=strlen(data);
    // appending n-1 zeros to the data
    for(i=data_length;i<data_length+N-1;i++)
        data[i]='0';
    printf("\n----------------------------------------");
// print the data with padded zeros
    printf("\n Data padded with n-1 zeros : %s",data);
    printf("\n----------------------------------------");
// Cyclic Redundancy Check
    crc();
// print the computed check value
    printf("\nCRC or Check value is : %s",check_value);
    for(i=data_length;i<data_length+N-1;i++)
        data[i]=check_value[i-data_length];
    printf("\n----------------------------------------");
    printf("\n Final data to be sent : %s",data);
    printf("\n----------------------------------------\n");
    receiver();
        return 0;
}





//tcpclient




#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<arpa/inet.h>
#include<netdb.h>
#include<netinet/in.h>
#include<errno.h>
#include<string.h>
int main()
{
	int sock,bytes_recv;
	struct sockaddr_in server_addr;
	char recv_data[1024],send_data[1024];
	struct hostent *host;
	host=gethostbyname("127.0.0.1");
	if((sock=socket(AF_INET,SOCK_STREAM,0))==-1)
	{
		perror("socket");
		exit(1);
	}
	server_addr.sin_family=AF_INET;
	server_addr.sin_port=htons(6119);
	server_addr.sin_addr.s_addr=inet_addr("127.0.0.1");
	if(connect(sock,(struct sockaddr *)&server_addr,sizeof(struct sockaddr))==-1)
	{
		perror("connect");
		exit(1);
	}
		printf("send Filename to send\n");
		gets(send_data);

		if(strcmp(send_data,"q")!=0)
			send(sock,send_data,strlen(send_data),0);
		
		while((bytes_recv=recv(sock,recv_data,1024,0))>0)
		{
			recv_data[bytes_recv]='\0';
			//printf("%s\n\n", recv_data);
			//if(strcmp(recv_data,"q")==0)
		//	{
		//	close(sock);
		//	break;
		//	}
			printf("%s\n", recv_data);
		}
	close(sock);	
	return 0;
}





//tcpserver




#include<stdio.h>
#include<stdlib.h>
#include<arpa/inet.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<errno.h>
#include<unistd.h>
#include<netinet/in.h>
#include<string.h>
int main()
{
	struct sockaddr_in server_addr;
	struct sockaddr_in client_addr;
	FILE *fptr;
	int sock,connected,bytes_recv;
	char ch,send_data[1024],recv_data[1024];
	int sin_size,flag = 0;


	if((sock=socket(AF_INET,SOCK_STREAM,0))==-1)
	{
		perror("socket");
		exit(1);
	}


	server_addr.sin_family=AF_INET;
	server_addr.sin_port=htons(6119);
	server_addr.sin_addr.s_addr=inet_addr("127.0.0.1");

	if(bind(sock,(struct sockaddr *)&server_addr, sizeof(struct sockaddr))==-1)
	{
		perror("unable to bind");
		exit(1);
	}

	if(listen(sock,5)==-1)
	{
		perror("lsten");
		exit(1);
	}

	printf("tcp server is waiting for client on port XXXX\n");
	sin_size=sizeof(struct sockaddr_in);
	connected=accept(sock,(struct sockaddr *)&client_addr,&sin_size);

	while(1)
	{
		
		bytes_recv=recv(connected,recv_data,1024,0);
		recv_data[bytes_recv]='\0';

		printf("reciecved data is %s\n\n\n",recv_data);
		
		
		fptr=fopen(recv_data,"r");
		if(fptr==NULL)
		{
			strcpy(send_data,"FILE");
			send(connected,send_data,strlen(send_data),0);
		}
		ch = fgetc(fptr);

		while(ch != EOF)//this loop searches the for the current word
		{
		   // fscanf(fptr,"%s",send_data);
			send_data[flag] = ch;
			flag++;
			ch = fgetc(fptr);
		   //send(connected,send_data,strlen(send_data),0);
		}
			send(connected,send_data,strlen(send_data),0);
			//send_data[0] = 'q';
			//strcpy(send_data,"q");
			//send(connected,send_data,strlen(send_data),0);
			close(connected);
			break;
	}
}



//udpclient




#include <stdio.h>
#include <strings.h>
#include <sys/types.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include<netinet/in.h>
#include<unistd.h>
#include<stdlib.h>

int main()
{
	int sock,n_bytes;
	struct sockaddr_in server_addr;
	char buffer[1024];
	
	char message[1024];
	printf("Enter the message to send to server\n");
	scanf("%s",message);
	
	sock = socket(AF_INET, SOCK_DGRAM, 0);
	bzero(&server_addr, sizeof(server_addr));
	
	server_addr.sin_family = AF_INET;
	server_addr.sin_port = htons(5000);
	server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
	
	if(connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1)
	{perror("Connect"); exit(1);}
	
	sendto(sock, message, 1024, 0, (struct sockaddr*)NULL, sizeof(server_addr));
	
	int n = recvfrom(sock, buffer, sizeof(buffer),0, NULL, NULL);
	buffer[n] = '\0';
	puts(buffer);
	
	close(sock);
}



//udpserver



#include <stdio.h>
#include <strings.h>
#include <sys/types.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include<netinet/in.h>

int main()
{
	int sock,n_bytes;
	struct sockaddr_in server_addr, client_addr;
	char *message = "Hello this is server";
	char buffer[1024];
	
	//printf("Enter the message to be sent\n");
	//scanf("%s",message);
	
	sock = socket(AF_INET,SOCK_DGRAM,0);
	
	bzero(&server_addr, sizeof(server_addr));
	server_addr.sin_family = AF_INET;
	server_addr.sin_port  = htons(5000);
	server_addr.sin_addr.s_addr =  inet_addr("127.0.0.1");
	
	bind(sock,(struct sockaddr *)&server_addr, sizeof(server_addr));
	
	n_bytes = sizeof(client_addr);
	int n = recvfrom(sock,buffer, sizeof(buffer), 0, (struct sockaddr *)&client_addr, &n_bytes);
	buffer[n] = '\0';
	puts(buffer);
	
	
	sendto(sock, message, 1024,0,  (struct sockaddr *)&client_addr, n_bytes);
	
}





//disv



#include<stdio.h>
struct node
{
	unsigned dist[20];
	unsigned from[20];
}rt[10];
int main()
{
int dmat[20][20];
int n,i,j,k,count=0;
printf("\nEnter the number of nodes: ");
scanf("%d",&n);
printf("\nEnter the cost matrix\n");
for(i=0;i<n;i++)
for(j=0;j<n;j++)
{
	scanf("%d",&dmat[i][j]);
	dmat[i][i]=0;
	rt[i].dist[j]=dmat[i][j];
	rt[i].from[j]=j;
}
do
{
count=0;
for(i=0;i<n;i++)
{
	for(j=0;j<n;j++)
	{
		for(k=0;k<n;k++)
		{
			if(rt[i].dist[j]>dmat[i][k]+rt[k].dist[j])
			{
				rt[i].dist[j]=rt[i].dist[k]+rt[k].dist[j];
				rt[i].from[j]=k;
				count++;
			}
		}
	}
}
}while(count!=0);
for(i=0;i<n;i++)
{
	printf("\n\nState value for router %d is \n",i+1);
	printf("\nNode \t Via \t Dist. ");
	for(j=0;j<n;j++)
	{
		printf("\n%d \t %d \t %d ",j+1,rt[i].from[j]+1,rt[i].dist[j]);
	}
}
printf("\n\n");
}




//leakybucket


#include<stdio.h>
#include<stdlib.h>
#define MIN(x,y)(x>y)?y:x
int main()
{
	int orate,drop=0,cap,x,count=0,input[10]={0},i=0,nsec,ch;
	printf("\n enter bucket size : ");
	scanf("%d",&cap);
	printf("\n enter output rate :");
	scanf("%d",&orate);
	do{
	printf("\n enter number of packets coming at second %d :",i+1);
	scanf("%d",&input[i]);
	if(input[i]>cap)
	{
		printf("Bucket overflow\n");		
		printf("Packet Discarded\n");
		exit(0);
	}
	i++;
	printf("\n enter 1 to contiue or 0 to quit..........");
	scanf("%d",&ch);
}
while(ch);
nsec=i;
printf("\n Second \t Recieved \t Sent \t Dropped \tRemained \n");
for(i=0;count || i<nsec;i++)
{
	printf("  %d",i+1);
	printf(" \t\t%d\t ",input[i]);
	printf(" \t%d\t ",MIN((input[i]+count),orate));
	if((x=input[i]+count-orate)>0)
	{
		if(x>cap)
		{
			count=cap;
			drop=x-cap;
		}
		else
		{
			count=x;
			drop=0;
		}
	} 
	
	
	
	//
	else
	{
		drop=0;
		count=0;
	}
	printf(" \t %d\t %d \n",drop,count);
}
return 0;
} 



//peer-peer




/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
#include "ns3/netanim-module.h"
#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"

using namespace ns3;
int
main (int argc, char *argv[])
{
  Time::SetResolution (Time::NS);
  NodeContainer nodes;
  nodes.Create (2);

  PointToPointHelper pointToPoint;
  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("5Mbps"));
  pointToPoint.SetChannelAttribute ("Delay", StringValue ("2ms"));

  NetDeviceContainer devices;
  devices = pointToPoint.Install (nodes);

  InternetStackHelper stack;
  stack.Install (nodes);

  Ipv4AddressHelper address;
  address.SetBase ("10.1.1.0", "255.255.255.0");

  Ipv4InterfaceContainer interfaces = address.Assign (devices);

  UdpEchoServerHelper echoServer (9);

  ApplicationContainer serverApps = echoServer.Install (nodes.Get (1));
  serverApps.Start (Seconds (1.0));
  serverApps.Stop (Seconds (10.0));

  UdpEchoClientHelper echoClient (interfaces.GetAddress (1), 9);
  echoClient.SetAttribute ("MaxPackets", UintegerValue (1));
  echoClient.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
  echoClient.SetAttribute ("PacketSize", UintegerValue (1024));

  ApplicationContainer clientApps = echoClient.Install (nodes.Get (0));
  clientApps.Start (Seconds (2.0));
  clientApps.Stop (Seconds (10.0));
 AnimationInterface anim ("peer-peer.xml");
  Simulator::Run ();
  Simulator::Destroy ();
  return 0;
}



//bus



/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
* You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

// Network topology
//
//       n0    n1   n2   n3
//       |     |    |    |
//       =================
//              LAN
//
// - UDP flows from n0 to n1 and back
// - DropTail queues 
// - Tracing of queues and packet receptions to file "udp-echo.tr"

#include <fstream>
#include "ns3/core-module.h"
#include "ns3/csma-module.h"
#include "ns3/applications-module.h"
#include "ns3/internet-module.h"
#include "ns3/netanim-module.h"

using namespace ns3;

int 
main (int argc, char *argv[])
{
  Address serverAddress;
NodeContainer n;
  n.Create (4);
InternetStackHelper internet;
  internet.Install (n);
CsmaHelper csma;
  csma.SetChannelAttribute ("DataRate", DataRateValue (DataRate (5000000)));
  csma.SetChannelAttribute ("Delay", TimeValue (MilliSeconds (2)));
  csma.SetDeviceAttribute ("Mtu", UintegerValue (1400));
  NetDeviceContainer d = csma.Install (n);
Ipv4AddressHelper ipv4;
      ipv4.SetBase ("10.1.1.0", "255.255.255.0");
      Ipv4InterfaceContainer i = ipv4.Assign (d);
      serverAddress = Address(i.GetAddress (1));
   
  uint16_t port = 9;  // well-known echo port number
  UdpEchoServerHelper server (port);
  ApplicationContainer apps = server.Install (n.Get (1));
  apps.Start (Seconds (1.0));
  apps.Stop (Seconds (10.0));


  uint32_t packetSize = 1024;
  uint32_t maxPacketCount = 1;
  Time interPacketInterval = Seconds (1.);
  UdpEchoClientHelper client (serverAddress, port);
  client.SetAttribute ("MaxPackets", UintegerValue (maxPacketCount));
  client.SetAttribute ("Interval", TimeValue (interPacketInterval));
  client.SetAttribute ("PacketSize", UintegerValue (packetSize));
  apps = client.Install (n.Get (0));
  apps.Start (Seconds (2.0));
  apps.Stop (Seconds (10.0));

#if 0
client.SetFill (apps.Get (0), "Hello World");
client.SetFill (apps.Get (0), 0xa5, 1024);
uint8_t fill[] = { 0, 1, 2, 3, 4, 5, 6};
  client.SetFill (apps.Get (0), fill, sizeof(fill), 1024);
#endif
AnimationInterface anim ("bus.xml");
  Simulator::Run ();
  Simulator::Destroy ();
  
}




//csma




#include "ns3/core-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/network-module.h"
#include "ns3/applications-module.h"
#include "ns3/wifi-module.h"
#include "ns3/mobility-module.h"
#include "ns3/csma-module.h"
#include "ns3/internet-module.h"
#include "ns3/netanim-module.h"


// Default Network Topology
//
//       10.1.1.0
// n0 -------------- n1   n2   n3   n4
//    point-to-point  |    |    |    |
//                    ================
//                      LAN 10.1.2.0


using namespace ns3;
int 
main (int argc, char *argv[])
{
 
  uint32_t nCsma = 3;
NodeContainer p2pNodes;
  p2pNodes.Create (2);

  NodeContainer csmaNodes;
  csmaNodes.Add (p2pNodes.Get (1));
  csmaNodes.Create (nCsma);

  PointToPointHelper pointToPoint;
  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("5Mbps"));
  pointToPoint.SetChannelAttribute ("Delay", StringValue ("2ms"));

  NetDeviceContainer p2pDevices;
  p2pDevices = pointToPoint.Install (p2pNodes);

  CsmaHelper csma;
  csma.SetChannelAttribute ("DataRate", StringValue ("100Mbps"));
  csma.SetChannelAttribute ("Delay", TimeValue (NanoSeconds (6560)));

  NetDeviceContainer csmaDevices;
  csmaDevices = csma.Install (csmaNodes);

  InternetStackHelper stack;
  stack.Install (p2pNodes.Get (0));
  stack.Install (csmaNodes);

  Ipv4AddressHelper address;
  address.SetBase ("10.1.1.0", "255.255.255.0");
  Ipv4InterfaceContainer p2pInterfaces;
  p2pInterfaces = address.Assign (p2pDevices);

  address.SetBase ("10.1.2.0", "255.255.255.0");
  Ipv4InterfaceContainer csmaInterfaces;
  csmaInterfaces = address.Assign (csmaDevices);

  UdpEchoServerHelper echoServer (9);

  ApplicationContainer serverApps = echoServer.Install (csmaNodes.Get (nCsma));
  serverApps.Start (Seconds (1.0));
  serverApps.Stop (Seconds (10.0));

  UdpEchoClientHelper echoClient (csmaInterfaces.GetAddress (nCsma), 9);
  echoClient.SetAttribute ("MaxPackets", UintegerValue (1));
  echoClient.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
  echoClient.SetAttribute ("PacketSize", UintegerValue (1024));

  ApplicationContainer clientApps = echoClient.Install (p2pNodes.Get (0));
  clientApps.Start (Seconds (2.0));
  clientApps.Stop (Seconds (10.0));

  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();

  pointToPoint.EnablePcapAll ("second");
  csma.EnablePcap ("second", csmaDevices.Get (1), true);
AnimationInterface anim ("csma.xml");
Simulator::Run ();
  Simulator::Destroy ();
  return 0;
}




//star




#include <string>
#include <fstream>
#include "ns3/core-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/internet-module.h"
#include "ns3/applications-module.h"
#include "ns3/network-module.h"
#include "ns3/packet-sink.h"
#include "ns3/netanim-module.h"

using namespace ns3;
int
main (int argc, char *argv[])
{


 uint32_t maxBytes = 0;
NodeContainer nodes;
 nodes.Create (2);
PointToPointHelper pointToPoint;
  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("500Kbps"));
  pointToPoint.SetChannelAttribute ("Delay", StringValue ("5ms"));
NetDeviceContainer devices;
  devices = pointToPoint.Install (nodes);
InternetStackHelper internet;
 internet.Install (nodes);
Ipv4AddressHelper ipv4;
 ipv4.SetBase ("10.1.1.0", "255.255.255.0");
 Ipv4InterfaceContainer i = ipv4.Assign (devices);
uint16_t port = 9;  // well-known echo port number
 BulkSendHelper source ("ns3::TcpSocketFactory",
 InetSocketAddress (i.GetAddress (1), port));
  source.SetAttribute ("MaxBytes", UintegerValue (maxBytes));
  ApplicationContainer sourceApps = source.Install (nodes.Get (0));
  sourceApps.Start (Seconds (0.0));
  sourceApps.Stop (Seconds (10.0));
PacketSinkHelper sink ("ns3::TcpSocketFactory",
  InetSocketAddress (Ipv4Address::GetAny (), port));
  ApplicationContainer sinkApps = sink.Install (nodes.Get (1));
  sinkApps.Start (Seconds (0.0));
  sinkApps.Stop (Seconds (10.0));
Simulator::Stop (Seconds (10.0));
AnimationInterface anim ("star.xml"); 
anim.EnablePacketMetadata(true);
 Simulator::Run ();
  Simulator::Destroy ();
  

  }


